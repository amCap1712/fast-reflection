/*
 *  Licensed to the Apache Software Foundation (ASF) under one
 *  or more contributor license agreements.  See the NOTICE file
 *  distributed with this work for additional information
 *  regarding copyright ownership.  The ASF licenses this file
 *  to you under the Apache License, Version 2.0 (the
 *  "License"); you may not use this file except in compliance
 *  with the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an
 *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See the License for the
 *  specific language governing permissions and limitations
 *  under the License.
 */

plugins {
    id 'java-library'
    id "me.champeau.gradle.jmh" version "0.5.3"
}

repositories {
    maven { url 'https://maven.aliyun.com/nexus/content/groups/public' }
    mavenCentral()
}

dependencies {
    api "org.ow2.asm:asm:${version_asm}"

    testImplementation "org.junit.jupiter:junit-jupiter-api:${version_junit}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${version_junit}"
}

group 'me.sunlan'
version '1.0-SNAPSHOT'

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

tasks.named('test') {
    jvmArgs(['-Xms512m', '-Xms512m', '-XX:MetaspaceSize=256m', '-XX:MaxMetaspaceSize=256m', '-XX:+UseG1GC'])

    // Use junit platform for unit tests.
    useJUnitPlatform()
}

jmh {
    jvmArgs = ['-Xms2g', '-Xms2g', '-XX:MetaspaceSize=512m', '-XX:MaxMetaspaceSize=512m', '-XX:+UseG1GC']
    profilers = ['perfasm']
    humanOutputFile = project.file("${project.buildDir}/reports/jmh/human.txt")
    jmhVersion = '1.33'
    includeTests = true
    duplicateClassesStrategy = 'WARN'
}

tasks.withType(Wrapper).configureEach {
    gradleVersion = version_gradle
}
